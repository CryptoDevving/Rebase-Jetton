#pragma version >=0.4.0;
#include "imports/op-codes.fc";
#include "imports/params.fc";
#include "imports/helpers.fc";
#include "imports/rebase-jetton-utils.fc";
#include "imports/stdlib.fc";

;; storage scheme
;; storage#_ total_supply:Coins  total_shares:VarUInteger 32 admin_address:MsgAddress content:^Cell rebase_jetton_wallet_code:^Cell = Storage;

(int, int, slice, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_coins(),          ;; total_supply
      ds~load_shares(),         ;; total_shares
      ds~load_msg_addr(),       ;; admin_address
      ds~load_ref(),            ;; content
      ds~load_ref()             ;; rebase_jetton_wallet_code
  );
}

() save_data(int total_supply, int total_shares, slice admin_address, cell content, cell rebase_jetton_wallet_code) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_shares(total_shares)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(rebase_jetton_wallet_code)
           .end_cell()
          );
}

() mint_tokens(slice to_address, cell rebase_jetton_wallet_code, int amount, cell master_msg) impure {
  cell state_init = calculate_rebase_jetton_wallet_state_init(to_address, my_address(), rebase_jetton_wallet_code);
  slice to_wallet_address = calculate_rebase_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(amount)
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), 1);
}

int _convert_to_shares(int total_supply, int total_shares, int balance) impure inline {
    return muldivr(balance, total_shares, total_supply);
}

int _convert_to_balance(int total_supply, int total_shares, int shares) impure inline {
    return muldivr(shares, total_supply, total_shares);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
  
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, int total_shares, slice admin_address, cell content, cell rebase_jetton_wallet_code) = load_data();

    if (op == op_mint) {
        throw_unless(73, equal_slices(sender_address, admin_address));

        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        slice master_msg = in_msg_body~load_ref().begin_parse();

        var op = master_msg~load_uint(32);
        var query_id = master_msg~load_uint(64);
        int jetton_amount = master_msg~load_coins();

        int shares = _convert_to_shares(total_supply, total_shares, jetton_amount);

        var master_msg_with_shares = begin_cell()
        .store_uint(op,32)
        .store_uint(query_id, 64)
        .store_shares(shares)
        .store_slice(master_msg);

        mint_tokens(to_address, rebase_jetton_wallet_code, amount, master_msg_with_shares.end_cell());
        save_data(total_supply + jetton_amount, total_shares + shares,admin_address, content, rebase_jetton_wallet_code);
        return ();
    }

    if (op == op_burn_notification) {
        int shares = in_msg_body~load_shares();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(calculate_user_rebase_jetton_wallet_address(from_address, my_address(), rebase_jetton_wallet_code), sender_address)
        );

        int jetton_amount = _convert_to_balance(total_supply, total_shares, shares);

        save_data(total_supply - jetton_amount, total_shares - shares, admin_address, content, rebase_jetton_wallet_code);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
          var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(response_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op_excesses, 32)
            .store_uint(query_id, 64);
          send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op_change_supply) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        int new_total_supply = in_msg_body~load_coins();

        if (new_total_supply == total_supply) {
            return ();
        }

        save_data(new_total_supply, total_shares,admin_address, content, rebase_jetton_wallet_code);
        return ();
    }

    if (op == 3) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, total_shares, new_admin_address, content, rebase_jetton_wallet_code);
        return ();
    }

    if (op == 4) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, total_shares,admin_address, in_msg_body~load_ref(), rebase_jetton_wallet_code);
        return ();
    }

    throw(0xffff);
}

(int, int, int, slice, cell, cell) get_rebase_jetton_data() method_id {
    (int total_supply, int total_shares, slice admin_address, cell content, cell rebase_jetton_wallet_code) = load_data();
    return (total_supply, total_shares, -1, admin_address, content, rebase_jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, int total_shares, slice admin_address, cell content, cell rebase_jetton_wallet_code) = load_data();
    return calculate_user_rebase_jetton_wallet_address(owner_address, my_address(), rebase_jetton_wallet_code);
}

int get_jetton_balance(int shares) method_id  {
    (int total_supply, int total_shares, slice admin_address, cell content, cell rebase_jetton_wallet_code) = load_data();
    return _convert_to_balance(total_supply,total_shares, shares);
}

int get_jetton_shares(int balance) method_id {
    (int total_supply, int total_shares, slice admin_address, cell content, cell rebase_jetton_wallet_code) = load_data();
    return _convert_to_shares( total_supply,total_shares,balance);
}